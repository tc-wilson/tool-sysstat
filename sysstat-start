#!/bin/bash
exec >sysstat-start-stderrout.txt
exec 2>&1

echo "args: $@"
echo "pwd: `/bin/pwd`"
echo "hostname: `hostname`"
# defaults
subtools="mpstat,sar,iostat,pidstat"
interval=3

longopts="subtools:,interval:"
opts=$(getopt -q -o "" --longoptions "$longopts" -n "getopt.sh" -- "$@");
if [ $? -ne 0 ]; then
    printf -- "\tUnrecognized option specified\n\n"
    exit 1
fi
eval set -- "$opts";
while true; do
    case "$1" in
        --subtools)
            shift;
            subtools=$1
            echo "subtools=$subtools"
            shift;
            ;;
        --interval)
            shift;
            interval=$1
            echo "interval=$interval"
            shift;
            ;;
        --)
            shift;
            break
            ;;
        *)
            echo "Invalid option: $1"
            exit 1
    esac
done

# To be used by mpstat for post-processing
if [ -e /sys/devices/system/cpu/ ]; then
    find /sys/devices/system/cpu/ | grep topology | cpio -pdumv --quiet . 2>/dev/null
else
    echo "WARNING: could not find /sys/devices/system/cpu/"
fi

# To be used by sar for post-processing
if [ -e /sys/class/net ]; then
    /bin/ls -1 /sys/class/net | while read netdev; do
        echo "$netdev `readlink /sys/class/net/$netdev`" >>netdev-types.txt
    done
fi

/bin/rm -f sysstat-pids.txt
for subtool in `echo $subtools | sed -e 's/,/ /g'`; do
    case "$subtool" in
        pidstat)
            echo "Starting pidstat"
            TZ=UTC S_TIME_FORMAT=ISO pidstat -p ALL $interval >pidstat-stdout.txt 2>pidstat-stderr.txt &
            pidstat_pid=$!
            echo "$pidstat_pid" >>sysstat-pids.txt
            echo "pidstat pid is $pidstat_pid"
            ;;
        mpstat)
            echo "Starting mpstat"
            TZ=UTC S_TIME_FORMAT=ISO mpstat -o JSON -P ALL $interval >mpstat.json 2>mpstat-stderr.txt &
            mpstat_pid=$!
            echo "$mpstat_pid" >>sysstat-pids.txt
            echo "mpstat pid is $mpstat_pid"
            ;;
        iostat)
            echo "Starting iostat"
            TZ=UTC S_TIME_FORMAT=ISO iostat -xtdkyN -p ALL $interval >iostat-stdout.txt 2>iostat-stderr.txt &
            iostat_pid=$!
            echo "$iostat_pid" >>sysstat-pids.txt
            echo "iostat pid is $iostat_pid"
            ;;
        sar)
            echo "Starting sar"
            TZ=UTC S_TIME_FORMAT=ISO sar -n ALL -B -q ALL -W -H -m ALL -w $interval >sar-stdout.txt 2>sar-stderr.txt &
            sar_pid=$!
            echo "$sar_pid" >>sysstat-pids.txt
            echo "sar pid is $sar_pid"
            ;;
        *)
            echo "Invalid subtool: $subtool"
            ;;
    esac
done
